# -*- coding: utf-8 -*-

import os

# Dirs where test config files are located
BASE_DIR = os.path.abspath(os.path.dirname(__file__))
DATA_DIR = os.path.join(BASE_DIR, os.path.join(
    'tests', os.path.join('functional', 'data')))
MASTER_DATA_DIR = os.path.join(DATA_DIR, 'master')
SLAVE_DATA_DIR = os.path.join(DATA_DIR, 'slave')
UI_DATA_DIR = os.path.join(DATA_DIR, 'ui')

# Config files to be used on tests
# I need different config files because I have parallel tests running
# and accessing database and tcp ports.

TOXICMASTER_CONF = os.path.join(MASTER_DATA_DIR,
                                'toxicmaster.conf')

TOXICSLAVE_CONF = os.path.join(SLAVE_DATA_DIR,
                               'toxicslave.conf')

TOXICUI_CONF = os.path.join(UI_DATA_DIR,
                            'toxicui.conf')

PY_ENVVARS = {'TOXICMASTER_SETTINGS': TOXICMASTER_CONF,
              'TOXICSLAVE_SETTINGS': TOXICSLAVE_CONF,
              'TOXICUI_SETTINGS': TOXICUI_CONF,
              'DISPLAY': ':99',
              'TOXICSLEEP_TIME': '1.5'}


# Here the commands that will be the steps in the build.
# This runs unit tests and check tests coverage.
UNITTEST_COVERAGE = {
    'name': 'Unit tests & coverage',
    'command': './build-scripts/check_coverage.sh toxicbuild 100',
    'timeout': 20}

# This runs functional tests.
FUNCTIONAL = {
    'name': 'Functional tests for',
    'command': 'python setup.py test --test-suite=tests.functional',
    'timeout': 20}

# Selenium tests
SELENIUM = {
    'name': 'Selenium tests for web ui',
    'command': './build-scripts/run_selenium_tests.sh',
    'timeout': 35}

# This checks pep8 and pyflakes.
FLAKE8 = {
    'name': 'Checking pyflakes e pep8',
    'command': './build-scripts/check_style.sh',
    'warning_on_fail': True}

# Checks code complexity
XENON = {
    'name': 'Checking code complexity',
    'command': 'xenon toxicbuild -b B',
    'warning_on_fail': True}

# Update html docs on the remote server. Uses the docs in the branch release
UPLOAD_DOCS = {
    'name': 'Upload documentation',
    'command': 'pdj-deployer pdj01 software_deploy toxicbuild_docs release',
    'warning_on_fail': True}

UPLOAD2PYPI = {
    'name': 'Upload to PyPI',
    'command': './build-scripts/upload2pypi.sh',
    'timeout': 300}

# This python-venv pluging creates a new virtual env and install deps
# using pip.

APT_INSTALL = {'name': 'apt-install',
               'packages': ['chromedriver', 'xvfb',
                            'rabbitmq-server']}

# Virtual env for python3.5
PY35_VENV = {'name': 'python-venv',
             'pyversion': 'python3.5',
             'requirements_file': 'requirements.txt'}
# 'remove_env': True}

# Virtual env for python3.6
PY36_VENV = {'name': 'python-venv',
             'pyversion': 'python3.6',
             'requirements_file': 'requirements.txt'}


TEST_STEPS = [UNITTEST_COVERAGE, FUNCTIONAL, SELENIUM, FLAKE8, XENON]

RELEASE_STEPS = [UNITTEST_COVERAGE, FUNCTIONAL, SELENIUM, FLAKE8, XENON,
                 UPLOAD_DOCS, UPLOAD2PYPI]


BASE_MASTER_BUILDER = {
    'branches': ['master'],
    'steps': TEST_STEPS
}


# Builder to run on python3.5
PY35_BUILDER = BASE_MASTER_BUILDER.copy()
PY35_BUILDER.update({'name': 'python3.5',
                     'plugins': [APT_INSTALL, PY35_VENV],
                     'envvars': PY_ENVVARS,
                     'platform': 'python3.5'})

# Builder to run on python3.6
PY36_BUILDER = BASE_MASTER_BUILDER.copy()
PY36_BUILDER.update({'name': 'python3.6',
                     'plugins': [APT_INSTALL, PY36_VENV],
                     'branches': ['master', 'feature-*', 'bug-*'],
                     'envvars': PY_ENVVARS,
                     'platform': 'python3.6',
                     'remove_env': False})


# Builder to run on release branch
RELEASE_BUILDER = {
    'name': 'release',
    'branches': ['release'],
    'envvars': PY_ENVVARS,
    'platform': 'python3.6',
    'plugins': [APT_INSTALL, PY36_VENV],
    'steps': RELEASE_STEPS,
}


# The list of builders that will be used when the repo changes
BUILDERS = [PY35_BUILDER, PY36_BUILDER, RELEASE_BUILDER]
