#!/usr/bin/env python
# -*- coding: utf-8 -*-

# Copyright 2019 Juca Crispim <juca@poraodojuca.net>

# This file is part of toxicbuild.

# toxicbuild is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# toxicbuild is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with toxicbuild. If not, see <http://www.gnu.org/licenses/>.


# No comments here, sir. Let's have some fun

import asyncio
import configparser
import os

import sys

from toxicbuild.common.interfaces import BaseInterface, UserInterface
from toxicbuild.ui.console.screens import ToxicConsole


cf = os.path.join(os.path.join(
    os.path.expanduser('~'), '.toxicui'), 'toxicconsole.conf')
if not os.path.exists(cf):
    try:
        os.mkdir(os.path.dirname(cf))
    except:
        pass

    with open(cf, 'w') as fd:
        fd.write('# toxicbuild console conffile\n\n[console]\n')


def get_conf(conffile):
    config = configparser.ConfigParser()
    config.read(conffile)
    tc = config['console']
    return tc['username_or_email'], tc['password'], tc['host'], tc['port'],\
        tc['token'], tc['use_ssl'], tc['validate_cert']


async def authenticate(username_or_email, password):

    user = await UserInterface.authenticate(username_or_email, password)
    return user


if __name__ == '__main__':

    if '-h' in sys.argv or '--help' in sys.argv:
        print('nice try.')
        sys.exit(1)

    try:
        username_or_email, password, host, port, \
            token, use_ssl, validate_cert = get_conf(cf)
        use_ssl = [True, False][use_ssl == 'False']
        validate_cert = [True, False][validate_cert == 'False']
    except Exception:
        print('Something went wrong.')
        sys.exit(1)

    class settings:

        HOLE_HOST = host
        HOLE_PORT = port
        HOLE_TOKEN = token
        MASTER_USES_SSL = use_ssl
        VALIDATE_CERT_MASTER = validate_cert

    BaseInterface.settings = settings
    loop = asyncio.get_event_loop()
    user = loop.run_until_complete(authenticate(username_or_email, password))

    tc = ToxicConsole(user)
    tc.run()
